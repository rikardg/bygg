import os
import sys
from typing import List, Optional

import msgspec
import rich
import rich.status

PYTHON_INPUTFILE = "Byggfile.py"
YAML_INPUTFILE = "Byggfile.yml"


class PreCommand(msgspec.Struct, forbid_unknown_fields=True):
    """Settings for a command to run before the virtual environment is created. Useful
    e.g. for making sure that the right version of Python is installed."""

    message: Optional[str] = None
    shell: Optional[str] = None


class VenvSettings(msgspec.Struct, forbid_unknown_fields=True):
    """Settings for the virtual environment."""

    use_venv: Optional[bool] = None
    """use_venv: Whether to use a virtual environment. Default is to not use a virtual environment."""
    venv_path: Optional[str] = None
    """venv_path: The path to the virtual environment. Defaults to <CONFIGPATH>/.venv ."""
    manage_venv: Optional[bool] = None
    """manage_venv: Whether to create and manage the virtual environment. Default is to not
    manage the virtual environment.
    """
    create_venv_command: Optional[str] = None
    """create_venv_command: The command to use for creating the virtual environment. If
    not specified and manage_venv is True, the venv package will be used."""
    requirements_files: Optional[List[str]] = None
    """requirements_files: A list of requirements files to install in the virtual
    environment. Will be installed using `pip -r <FILENAME>`
    """
    requirements: Optional[List[str]] = None
    """requirements: A list of packages to install in the virtual environment. Will be
    installed using `pip install <PACKAGE>`
    """


class SettingsSection(msgspec.Struct, forbid_unknown_fields=True):
    pre_command: Optional[PreCommand] = None
    venv_settings: Optional[VenvSettings] = None
    default_action: Optional[str] = None


class ActionItem(msgspec.Struct, forbid_unknown_fields=True):
    """
    name: The name of the action.
    description: A description of the action. Used in e.g. help messages.
    message: A message to print when the action is executed.
    inputs: A list of files that are used as input to the action.
    outputs: A list of files that are generated by the action.
    dependencies: A list of actions that must be executed before this action.
    is_entrypoint: Whether this action is an entrypoint. Entry points are actions that
    can be executed directly from the command line.
    shell: The shell command to execute when the action is run.
    """

    name: str
    description: Optional[str] = None
    message: Optional[str] = None
    inputs: Optional[List[str]] = None
    outputs: Optional[List[str]] = None
    dependencies: Optional[List[str]] = None
    is_entrypoint: Optional[bool] = None
    shell: Optional[str] = None


class ByggFile(msgspec.Struct):
    actions: List[ActionItem]
    settings: SettingsSection = msgspec.field(default_factory=SettingsSection)


def load_python_build_file():
    if os.path.isfile(PYTHON_INPUTFILE):
        with open(PYTHON_INPUTFILE, "r") as f:
            # modify load path to make the current directory importable
            preamble = "import sys\nsys.path.insert(0, '.')\n\n"
            exec(preamble + f.read(), globals())


def read_config_file() -> ByggFile | None:
    if not os.path.isfile(YAML_INPUTFILE):
        return None

    try:
        with open(YAML_INPUTFILE, "r") as f:
            return msgspec.yaml.decode(f.read(), type=ByggFile)
    except Exception as e:
        rich.print(
            "[red bold]Error while reading configuration file "
            f"[yellow]{YAML_INPUTFILE}[/yellow]:[/red bold] {e}"
        )
        sys.exit(1)


def dump_schema():
    import json

    schema = msgspec.json.schema(ByggFile)
    print(json.dumps(schema, indent=2))
